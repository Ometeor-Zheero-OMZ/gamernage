services:
  mydb:
    build:
      context: .
      dockerfile: ./docker/postgresql/Dockerfile
    environment:
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_DB: "${DB_NAME}"
    ports:
      - ${DB_PORT}:${DB_PORT}
    container_name: mydb
    volumes:
      - db-store:/var/lib/postgresql/data
      - ./logs:/var/log/postgresql:z
    networks:
      - app_net
    # Password
    env_file:
      - ./docker/postgresql/.env
    restart: on-failure:5

  # Rust
  myrust:
    build:
      context: .
      dockerfile: ./docker/rust/Dockerfile
    working_dir: /backend
    expose:
      - "${BACKEND_PORT}"
    environment:
      - TZ=UTC
    volumes:
      # log
      - ./logs:/backend/log
      # Rust code
      - ./backend/src:/backend/src
      - ./backend/Cargo.lock:/backend/Cargo.lock
      - ./backend/Cargo.toml:/backend/Cargo.toml
    command: /backend/target/release/backend
    container_name: myrust
    networks:
      - app_net
    restart: on-failure:5

  # Next.js
  mynext:
    container_name: mynext
    build:
      context: .
      dockerfile: ./docker/nextjs/Dockerfile
    restart: on-failure:5
    volumes:
      - ./frontend/out:/frontend/out
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    networks:
      - app_net

  # nginx
  nginx:
    image: nginx:1.27-alpine
    depends_on:
      - myrust
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
    volumes:
      # Rust code
      - ./backend/src:/backend/src
      # Next.js code
      - ./frontend/out:/frontend/out
      - ./backend/Cargo.lock:/backend/Cargo.lock
      - ./backend/Cargo.toml:/backend/Cargo.toml
      # log
      - ./logs:/var/log/nginx:z
      # nginx config
      - ./docker/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
    container_name: nginx
    networks:
      - app_net
    restart: on-failure:5

networks:
  app_net:
    driver: "bridge"
volumes:
  db-store:
# services:
#   mydb:
#     build:
#       context: .
#       dockerfile: ./docker/postgresql/Dockerfile
#     environment:
#       POSTGRES_PASSWORD: "${DB_PASSWORD}"
#       POSTGRES_USER: "${DB_USER}"
#       POSTGRES_DB: "${DB_NAME}"
#     ports:
#       - ${DB_PORT}:${DB_PORT}
#     container_name: mydb
#     volumes:
#       - db-store:/var/lib/postgresql/data
#       - ./logs:/var/log/postgresql:z
#     networks:
#       - app_net
#     # Password
#     env_file:
#       - ./docker/postgresql/.env
#     restart: on-failure:5

#   # Rust
#   myrust:
#     build:
#       context: .
#       dockerfile: ./docker/rust/Dockerfile
#     working_dir: /backend
#     expose:
#       - "${BACKEND_PORT}"
#     environment:
#       - TZ=UTC
#     volumes:
#       # log
#       - ./logs:/backend/log
#       # Rust code
#       - ./backend/src:/backend/src
#       - ./backend/Cargo.lock:/backend/Cargo.lock
#       - ./backend/Cargo.toml:/backend/Cargo.toml
#     command: /backend/target/release/backend
#     container_name: myrust
#     networks:
#       - app_net
#     restart: on-failure:5
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:8080"]
#       interval: 30s
#       retries: 3

#   # Next.js
#   mynext:
#     container_name: mynext
#     build:
#       context: .
#       dockerfile: ./docker/nextjs/Dockerfile
#     restart: on-failure:5
#     ports:
#       - "${FRONTEND_PORT}:${FRONTEND_PORT}"
#     networks:
#       - app_net
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:3000"]
#       interval: 30s
#       retries: 3

#   # nginx
#   nginx:
#     image: nginx:1.27-alpine
#     depends_on:
#       - myrust
#       - mynext
#     ports:
#       - "${NGINX_PORT}:${NGINX_PORT}"
#     volumes:
#       # nginx config
#       - ./docker/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
#       - ./frontend/.next/static:/app/.next/static:ro
#     container_name: nginx
#     networks:
#       - app_net
#     restart: on-failure:5

# networks:
#   app_net:
#     driver: "bridge"
# volumes:
#   db-store:
